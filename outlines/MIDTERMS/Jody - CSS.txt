CASCADING STYLE SHEET (CSS)
	- It is used to specify how websites/documents are displayed/presented.
	  It is purposely used for presentation aspects such as for fonts, colors, 
	  and screen layouts of HTML, XML, SVG, MathML documents and other documents
	  using a markup language.
	  	** Mark-up Language - languages used to indicate how documents are presented
	  						  or structured. It uses tags to define the structure
	  						  of the document.


VERSION HISTORY (a.k.a 'The CSS Saga')
	1994 - Hakon Wium Lee released the draft of 'Cascading HTML Style Sheets' along with
		   Bert Bos who was, at that time, developing a browser name Argo, which supports its own
		   stylesheet.
		 - The proposal fo 'Cascading HTML Style Sheets' was launched.
	1996 - CSS Level 1 was published as a W3C Recommendation
			> CSS Level 1 supports the following fetures:
				- font properties
				- text attributes
				- alignment of text
				- tables
				- images
				- text colors
				- backgrounds
				- word spacing
				- margins
				- borders
				- padding
				- positioning
		 - Mozilla browser was the first ever browser to support CSS
	1998 - CSS Level 2 became a W3C Recommendation
		 - Features which were not included in CSS Level 1 were added to CSS Level 2
		 	> CSS Level 2 added the following fetures:
		 		- z-index
		 		- media types
		 		- bidirectional text
		 		- absolute, relative and fixed positioning

		 - The new browser 'Opera' was released which supports CSS

	2011 - W3C released CSS Level 2.1 which fixes errors/bugs in CSS Level 2 and fixed
		   its browser function capabilities.

	Around 2012 - CSS Level 3 was released which was a modular approach to CSS Development
				  (as opposed to the 'monolithic' specification of CSS Level 2.1)
				  > The following are the 4 modules which were released as formal recommendation:
				  	- color
				  	- selectors level 3
				  	- namespaces
				  	- media queries

HTML Style Sheets

	> Three Main source styles for HTML Documents:
		A. Author Style
			A.1 External
				- a.k.a 'Linked Stylesheet' which is recommended because it provides easier caching
				  and it can be edited easily as well as it can be used in multiple sites and documents.
				- These are stylesheets separated from the HTML documents.
			A.2 Embedded
				- a.k.a 'Internal Stylesheet' which is not very much recommended because since it is internal, 
				  it cannot be used by other sites/documents.
				- These are style sheets defined within the HTML Document.
			A.3 Inline
				- These style sheets are defined within the HTML tags.

		B. User Styles
			- These are non-standard styles such that it allows users to provide their own style sheet or preferred 
			  layout for the website. 
			- Some browsers also provide alternative styles through plugins and extensions. For example, Chrome's
			  extension called 'Stylish Extension' provides different themes for different websites which the users
			  can choose from.

		C. User Agent Styles
			- Browsers provide their own/default style sheet in rendering the websites.

CSS Statements
	1. At-Rules 
		- these are commonly denoted with an annotation '@'
		- example:
			> @charset
			> @import
			> @namespace
			> @font-face
				- At-Rule used for defining font-styles which are typically Google Fonts
			> @Keyframes
				- At-Rule used for animations

		* Nested At-Rules
			- These are At-Rules within an At-Rule
			- example: @media

	2. CSS Rule Sets
		- a.k.a 'CSS Rules'/ 'Style Rules'
		- consists of a selector followed by a brace-enclosed declaration block that contains
		  0 or more declarations that end in semi-colon(;).

		  Syntax:


CSS Selectors
	A. Selector
		- Structure used as a condition in a CSS Rule
		- It is used to specify the HTML elements we want to style.

		TYPES OF SELECTOR:
			1. Simple Selector
				- It does not contain any combinators which means that it cannot contain other types of 
				  selectors or Universal selectors.
				- It starts with a type selector (HTML element) or a Universal Selector.

				ex:

					h1 {
						text-align: center;
					}

				Types of Simple Selectors:
					a. Universal Selector
						- It is denoted by an asterisk (*) symbol.
						- It means that it targets any element/component of the document.

						ex: 
							* {
							   font-size: 20px;
							}

					b. Type Selector
						- It specifies the element type specifically the HTML element allowing all
						  elements that matches the indicated type Selector to be styled.

						ex:
							p {color: red;}

					c. ID Selector
						- It is always introduced by the pound (#) sign.
						- This type of selector targets elements that has an attribute called 'id' and
						  the values of the attributes matches the specified ID selector.

						ex: 
							#main {padding: 10px;}

					d. Class Selector
						- It is always introduced by the period (.).
						- It is somewhat similar to the ID Selector but it uses the values of the 'class'
					      attribute instead.

					    ex:
					    	.container {margin-bottom: 10px;}

					   	- It can also target class attributes with 2 or more values.

					   	ex:
					   		p.feature.quote {text-align: justify;}

					e. Attribute Selector
						- It is a generic way of associating design to the attributes of the document..
						- It is indicated by a square brackets ([]).

						ex: 
							img[alt] {border: 1px solid green;}

						Wildcards used in the selector:
							1) *=
								- This targets all attributes that contains the specified value.
								- It also means 'contains'

							   ex: 
							  		a[href *= google] -- this targets all href attributes that has a value
							  							 containing the word 'google' 

							2) $=
								- This targets all attributes with values having a suffix similar to the
								  value indicated in the selector.

							   ex: 
							   		a[href $= '.png'] -- this targets all href attributes that has a value with
							   							 a suffix of '.png'

							3) ^= 
								- Instead of suffix, similar to No. 2, it targets all attrbutes with values having
								  a prefix similar to the value indicated in the selector.

							   ex:
							   		a[href ^= https] -- this targets all a elements with href attributes that has a 
							   							value starting with 'https'

							4) |= 
								- This targets attributes who has a value that has either an exact match or exact 
								  match with a hyphen/dash (-).

							   ex:
							   		p[lang |= en] -- this targets all p elements with attributes having the values 
							   						 either 'en' or 'en-'

							5) ~=
								- This targets all attributes who has a value of one or more such that either of the values
								  matches the indicated value for the selector.

							   ex:
							   		p[class ~= warn] -- this targets all p elements with a class having either one of the 
							   							values match the value indicated in the selector.
			2. Selector Group	
				- It is a comma-separated list of selectors to represent the union of all selectors which 
				  has a similar declaration.

				ex:
					h1 {
						text-align: center;
					} 

					h2 {													h1, h2, h3 {
						text-align: center;			is the same as 				text-align: center;
					} 														}

					h3 {
						text-align: center;
					} 

			3. Combinators
				- It is used to prepend/add another sequence of a selector.
				- It is a way of combining sequence of simple elements

				Types of Combinators:
					a. Descendant Combinator
						- Uses whitespace to combine selectors
							* whitespaces indicated by a tab, space,linefeed, carriagge return, etc.
						- It selects elements which are direct descendants of the element indicated 
						  before it.

					   ex:
					   	 div p -- targets all p elements which are direct descendants of the div element

					b. Child Combinator
						- Uses the greater than (>) sign to combine sequence of selectors
						- It selects elements which are direct children of the element indicated before it.

					   ex: 
					   	 div > p -- targets all p elements who are direct children of the div element.

					c. Sibling Combinators
						1) Adjacent Sibling Combinator
							- Uses the plus (+) sign to combine sequence of selectors
							- It selects elements that are exactly after the element indicated before it.

						   ex:
						   	div + p -- targets all p elements which are exactly after the ending tag of the
						   			   div element.

						2) General Sibling Combinator
							- Uses the tilde (~) to combine sequence of selectors
							- It selects all elements that follows the element indicated before it as long as 
							  they share the same parent.

						   ex:
						   	div ~ p -- targets all p elements that follows after the div element even if they are 
						   			   not exactly after the div element.

			4. Pseudo-Classes
				- These are used to target elements that has a changed state typically from a user interaction.
				- It is indicated by a colon (:)

					Types of Pseudo-Classes:
						a. Dynamic Pseudo-Class
							a.1 link-pseudo-class

								ex: 
									:link, :visited

							a.2 user action pseudo-class

								ex:
									:hover, :active, :focus

						b. Target Pseudo-Class
							- It is usually associated with the href attribute

							ex: 
								:target

						c. Language Pseudo-Class
							- It specifies the way of presenting text

							ex:
								:lang()

						d. UI Element States
							- It is commonly used with forms

							ex:
								:enabled, :disabled, :checked, :indeterminate

						e. Structural Pseudo-Class
							- It is associated with elements in the document tree

							ex: 
								:root, :first-child, :only-child, :nth-child()

						f. Negation
							- It negates the specified value for the pseudo-class

							ex:
								:not()

					> Pseudo-Elements
						** In CSS3, it is indicated by a double colon (::)

						ex:
							:first-letter
							::before, ::after -- both pseudo-elements are associated with
												 the element 'content: '

												 * content: -- It is used to include something or to add something
												 			   in the content of the document with the use of CSS.