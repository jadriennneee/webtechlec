HTTP (HyperText Transfer Protocol)
	- communication protocol used to access hypermedia/hypertext on www

	VERSION HISTORY:
		> HTTP 0.9 (1991)
			- uses one method only (GET method)
			- can only use one connection therefore not allowing persistent connection
			- responses can only provide HTML formats
		
		> HTTP 1.0 (RFC 1945, May 1996)
			- more methods are added (POST and HEAD method)
			- protocol can already accomodate extensions (ex. characters, etc.)
			- still uses one connection

		> HTTP 1.1 (RFC 2068 Jan 1997, RFC 2616 Jun 1999, RFC 7230-7235 Jun 2014)
			- protocol used until now
			- more methods are added (8 methods)

			FEATURES:
				- can already reuse connections
					-can already accomodate persistent connections
				- already supports data compression
					- body of message can already be compressed to enhance speed
					- does not support header compression
			*SPDY - Google's project to enhance data scheme

		> HTTP 2.0 (RFC 7540 May 2015)
			- enhanced version of HTTP 1.1
				- data transmission
				- already has multiplexing and pipelining
					*pipelining - making things concurrent
				- can already accomodate header compression

				FEATURES:
					- can accomodate server push
						*server push - server already anticipates the possible request so 
						that it can already send its response ahead of time

	HTTP FUNDAMENTALS:
		> stateless protocol
			*stateless - server does not need to keep information about Client's request
		> runs on top'of TCP/IP 
			- uses port 80 by default

		*https
			- HTTP over SSL/TLS
			- uses TCPp port 443 by default
			- protocol for securing information
		> based on client-server architecture
			SERVER:
				- origin server
					- processes requests
				- proxy server, gateways, tunnels

			CLIENT ("user agents")
				- gives requests to server
				- web crawlers/spiders, etc.
		> uses "request-response" protocol
		> provides support for other functionalities:
			- cache control 
				- if you need to reuse data
			- content media type (MIME) specification
				*MIME extension
			- language & character set specification
				- because of internalization
			- content/transfer codings
				- can have ways in transmitting the data
			- content negotiation
				- allows users/clientns to negotiatie in terms of preferred format
					(ex: .pdf, etc.)
			- persistent connection
			- client-server protocol negotiations
				- has to do with the way how client and server interact with each other
			- request pipelining/multiplexing
				*Multiplexing - concurrency
			- authentication/authrization
				- should be possble for user to be authenticated

	HTTP RESOURCE ADDRESSING
		- HTTP resources are identified using URIs (RFC 3968)
			> Parts of URL:
				- scheme (http/https)
				- authority
					- user information/authentication credentials (deprecated)
					- host 
						- associated with a domain name
							* Domain Name - resolved to an IP Address using DNS
					- port number (optional)
						- If no port number is specified, use default port no. 80
				- path
					- to resource 
						- resolved relative to the document root on the server
					- may refer to static/dynamic resource
				- query
					- '?' indicates the start of a query
					- additional parameters in URL
					- typically providd as kuey-value pairs
					- may be URL encoded
				- fragment identifier

	MESSAGE FORMATS
		- Parts:
			> Headline
			> Header
			> Blank Space after header
			> Body
		- HTTP Request message 										HTTP Response Message
			> Request line 												> Status Line
				- most commonly uses GET method
			> message headers											> Message Headers
			> empty line 												> empty line (CRLF)
			> Body of message (optional)								> Message Body (optional)
				** a.k.a 'payload'

		HTTP Request Methods
			> Standard Methods
				1. GET
					- transfers data from the server
					- must be supported by all servers
				2. HEAD
					- similar to GET method but there is no message body 
				3. POST
					- query is shown in the body
					- makes changes to the state of the server
				4. PUT
					- creates/replaces the stat targete of the target source
				5. DELETE
					- removes a resource
				6. OPTIONS
					- to find out communication options/requirements needed for the resource without an action
					- shows allows methods for the resource
				7. TRACE
					- get information about request wherein the server will echo back
					- includes header information and length of body
				8. CONNECT
					- used to establish a 'tunnel' between user and client to secure 
					  a connection through a proxy which can then be secured using TLS.
					                                                                   
			